
            .item_details
              %h1
                Sun Said What?!
              %p
                %strong
                  Posted by
                  %a{ :href => "http://log.lachstock.com.au/past/authors/2", :title => "View all posts by lachlanhardy" }
                    lachlanhardy
                  on
                  %a{ :href => "http://log.lachstock.com.au/past/2007/10/22/sun-said-what/", :title => "Permalink for this post" }
                    20071022 at 1101
            .item_content
              %p
                Back in May, I read an article describing a
                %a{ :href => "http://sun.com" }
                  Sun Microsystem
                project to replace Ajax. What caught my attention was the attitude towards
                %a{ :href => "http://lachstock.tumblr.com/post/1724290" }
                  existing web technologies
                \.
              %p
                Turns out the author had the focus of the article all backwards (at least I’m sure the Sun engineers would think so). The Ajax example was simply that. Sun’s Project Flair was implementing something far far more complex.
              %p
                Earlier this month, the project announced the open sourcing of the
                %a{ :href => "http://research.sun.com/projects/lively/" }
                  Sun Labs Lively Kernel
                , an implementation of the
                %a{ :href => "http://en.wikipedia.org/wiki/Morphic_(software)" }
                  Morphic
                user interface framework in JavaScript.
              %p
                This is the point at which all the hardcore CompSci programming freaks start salivating.
                %a{ :href => "http://www.squeak.org/" }
                  Squeak
                on the client side? Imagine using
                %a{ :href => "http://seaside.st/" }
                  Seaside
                for server development and Lively Kernel for the client!
              %p
                For those unfamiliar, and I can thank
                %a{ :href => "http://ducknewmedia.com.au/" }
                  Myles Byrne
                for introducing me to these concepts at the first
                %a{ :href => "http://railscamp07.org/" }
                  RailsCamp
                , this means that the Lively Kernel environment can be extended and developed while programming
                %em
                  inside
                the that same environment - no reboots or compiling needed. If that sounds esoteric, it is, extremely so; but it’s also as powerful as it is difficult. Which is why those CompSci geeks are drooling.
              %p
                Meanwhile, my inner standardista is screaming.
              %p
              %blockquote{ :cite => "http://research.sun.com/projects/lively/" }
                Our goal is to build a platform using a minimum number of underlying technologies. This is in contrast with many current web technologies that utilize a diverse array of technologies such as HTML, CSS, DOM, JavaScript, PHP, XML, and so on.
              %cite
                %a{ :href => "http://research.sun.com/projects/lively/" }
                  Sun Labs Lively Kernel
              \.
              </p>
              %p
                That quote resides in the
                %em
                  Motivation
                section of the Lively Kernel description. It evens sounds quite reasonable. Who wouldn’t want to cut down on the number of things you have to learn in order to be good at this thing we do? Being a skillful generalist is
                %strong
                  hard
                \.
              %p
                Not everybody can do what we do, and I’m not dissing these guys because I know they can program rings around me, but being hot programmers doesn’t make them web developers. The reason the web works is because of that layered approach. Because of those disparate technologies that can be drawn together to make something strong, elegant and stable.
              %p
                Building an entire website or “web application environment” in JavaScript strikes me as an interesting experiment and I know people who’ve done similar things (wave
                %a{ :href => "http://ducknewmedia.com.au/" }
                  Myles
                again, everybody), but it is not where the web should be progressing towards.
              %p
                Simplification is good. I’d love some more simplicity in my day-to-day work! But bringing everything down to a single uniform level is pushing that too far. It’s called putting all your eggs in one basket. Or even worse, it’s called a monoculture. If you want some intense thought cud for the next weeks or months, go and read
                %a{ :href => "http://www.dashes.com/anil/2006/10/life-or-death-f.html" }
                  Anil Dash on Monoculture and Web 2.0
                \.
              %p
                On that note, I’ll leave with a quote that sums up how at least some people at Sun are thinking about the web and web technologies right now:
              %blockquote{ :cite => "http://www.cio.in/news/viewArticle/ARTICLEID=3198" }
                AJAX sort of deals with all of the old way of doing things. It makes it simpler, which is great, but underneath it&rsquo;s still all this junky HTML, Document Object Model, CSS, all that stuff, where 30 years ago, we knew how to do that stuff cleanly with a dynamic programming language and a simple graphics model
              %cite
                Dan Ingalls quoted in
                %a{ :href => "http://www.cio.in/news/viewArticle/ARTICLEID=3198" }
                  Sun Eyes a JavaScript Alternative to AJAX
              \.
              </p>
            .item_meta
              .item_tags
                Tags:
                %a{ :href => "http://log.lachstock.com.au/past/tags/AnilDash", :title => "View posts tagged with &quot;AnilDash&quot;" }
                  AnilDash
                ,
                %a{ :href => "http://log.lachstock.com.au/past/tags/DanIngalls", :title => "View posts tagged with &quot;DanIngalls&quot;" }
                  DanIngalls
                ,
                %a{ :href => "http://log.lachstock.com.au/past/tags/JavaScript", :title => "View posts tagged with &quot;JavaScript&quot;" }
                  JavaScript
                ,
                %a{ :href => "http://log.lachstock.com.au/past/tags/LivelyKernel", :title => "View posts tagged with &quot;LivelyKernel&quot;" }
                  LivelyKernel
                ,
                %a{ :href => "http://log.lachstock.com.au/past/tags/Morphic", :title => "View posts tagged with &quot;Morphic&quot;" }
                  Morphic
                ,
                %a{ :href => "http://log.lachstock.com.au/past/tags/Seaside", :title => "View posts tagged with &quot;Seaside&quot;" }
                  Seaside
                ,
                %a{ :href => "http://log.lachstock.com.au/past/tags/Squeak", :title => "View posts tagged with &quot;Squeak&quot;" }
                  Squeak
                ,
                %a{ :href => "http://log.lachstock.com.au/past/tags/SunMicrosystems", :title => "View posts tagged with &quot;SunMicrosystems&quot;" }
                  SunMicrosystems
                ,
                %a{ :href => "http://log.lachstock.com.au/past/tags/future", :title => "View posts tagged with &quot;future&quot;" }
                  future
                ,
                %a{ :href => "http://log.lachstock.com.au/past/tags/geeks", :title => "View posts tagged with &quot;geeks&quot;" }
                  geeks
                ,
                %a{ :href => "http://log.lachstock.com.au/past/tags/monoculture", :title => "View posts tagged with &quot;monoculture&quot;" }
                  monoculture
                ,
                %a{ :href => "http://log.lachstock.com.au/past/tags/webstandards", :title => "View posts tagged with &quot;webstandards&quot;" }
                  webstandards
                ,
                %a{ :href => "http://log.lachstock.com.au/past/tags/webtechnologies", :title => "View posts tagged with &quot;webtechnologies&quot;" }
                  webtechnologies
              .item_hierarchy
                Hierarchy:
                %a{ :href => "http://log.lachstock.com.au/past/2007/10/17/meraki-madness/", :title => "Previous post" }
                  previous
                ,
                %a{ :href => "http://log.lachstock.com.au/past/2007/12/20/nonscary-way-of-learning-openid/", :title => "Next post" }
                  next
          